package pt.isel.ui

import isel.leic.tds.checkers.*
import java.io.*
import kotlin.test.*

class KingTest {

    val testFolder = "Output"
    val dummyId = 712535

    @BeforeTest fun setup() {
        val f = File("$testFolder/$dummyId.txt")
        if(f.exists()) f.delete()
    }

    @Test fun `Piece transforms into Queen`() {
        val board = BoardRun()
                .play(Square(5, 0), Square(4, 1), Player.WHITE)
                .play(Square(2, 3), Square(3, 4), Player.BLACK)
                .play(Square(4, 1), Square(3, 0), Player.WHITE)
                .play(Square(3, 4), Square(4, 3), Player.BLACK)
                .play(Square(5, 2), Square(3, 4), Player.WHITE)
                .play(Square(2, 5), Square(4, 3), Player.BLACK)
                .play(Square(5, 4), Square(3, 2), Player.WHITE)
                .play(Square(2, 1), Square(4, 3), Player.BLACK)
                .play(Square(6, 3), Square(5, 4), Player.WHITE)
                .play(Square(4, 3), Square(5, 2), Player.BLACK)
                .play(Square(6, 1), Square(4, 3), Player.WHITE)
                .play(Square(2, 7), Square(3, 6), Player.BLACK)
                .play(Square(5, 6), Square(4, 7), Player.WHITE)
                .play(Square(1, 2), Square(2, 1), Player.BLACK)
                .play(Square(4, 7), Square(2, 5), Player.WHITE)
                .play(Square(1, 6), Square(3, 4), Player.BLACK)
                .play(Square(3, 4), Square(5, 2), Player.BLACK)
                .play(Square(3, 0), Square(1, 2), Player.WHITE)
                .play(Square(0, 1), Square(2, 3), Player.BLACK)
                .play(Square(5, 4), Square(4, 5), Player.WHITE)
                .play(Square(1, 0), Square(2, 1), Player.BLACK)
                .play(Square(7, 0), Square(6, 1), Player.WHITE)
                .play(Square(5, 2), Square(7, 0), Player.BLACK)
        assertEquals(true, Square(7,0).toPosition(board).king)
    }

    @Test fun `Queen can move more than one Square at a time`() {
        val board = BoardRun()
                .play(Square(5, 0), Square(4, 1), Player.WHITE)
                .play(Square(2, 3), Square(3, 4), Player.BLACK)
                .play(Square(4, 1), Square(3, 0), Player.WHITE)
                .play(Square(3, 4), Square(4, 3), Player.BLACK)
                .play(Square(5, 2), Square(3, 4), Player.WHITE)
                .play(Square(2, 5), Square(4, 3), Player.BLACK)
                .play(Square(5, 4), Square(3, 2), Player.WHITE)
                .play(Square(2, 1), Square(4, 3), Player.BLACK)
                .play(Square(6, 3), Square(5, 4), Player.WHITE)
                .play(Square(4, 3), Square(5, 2), Player.BLACK)
                .play(Square(6, 1), Square(4, 3), Player.WHITE)
                .play(Square(2, 7), Square(3, 6), Player.BLACK)
                .play(Square(5, 6), Square(4, 7), Player.WHITE)
                .play(Square(1, 2), Square(2, 1), Player.BLACK)
                .play(Square(4, 7), Square(2, 5), Player.WHITE)
                .play(Square(1, 6), Square(3, 4), Player.BLACK)
                .play(Square(3, 4), Square(5, 2), Player.BLACK)
                .play(Square(3, 0), Square(1, 2), Player.WHITE)
                .play(Square(0, 1), Square(2, 3), Player.BLACK)
                .play(Square(5, 4), Square(4, 5), Player.WHITE)
                .play(Square(1, 0), Square(2, 1), Player.BLACK)
                .play(Square(7, 0), Square(6, 1), Player.WHITE)
                .play(Square(5, 2), Square(7, 0), Player.BLACK)
                .play(Square(4, 5), Square(3, 6), Player.WHITE)
                .play(Square(7, 0), Square(2, 5), Player.BLACK)
        assertEquals(Player.BLACK, Square(2,5).toPosition(board).player)

    }

    @Test fun `Queen can only move diagonally`() {
        val ex = assertFailsWith<IllegalArgumentException> {
            BoardRun()
                    .play(Square(5, 0), Square(4, 1), Player.WHITE)
                    .play(Square(2, 3), Square(3, 4), Player.BLACK)
                    .play(Square(4, 1), Square(3, 0), Player.WHITE)
                    .play(Square(3, 4), Square(4, 3), Player.BLACK)
                    .play(Square(5, 2), Square(3, 4), Player.WHITE)
                    .play(Square(2, 5), Square(4, 3), Player.BLACK)
                    .play(Square(5, 4), Square(3, 2), Player.WHITE)
                    .play(Square(2, 1), Square(4, 3), Player.BLACK)
                    .play(Square(6, 3), Square(5, 4), Player.WHITE)
                    .play(Square(4, 3), Square(5, 2), Player.BLACK)
                    .play(Square(6, 1), Square(4, 3), Player.WHITE)
                    .play(Square(2, 7), Square(3, 6), Player.BLACK)
                    .play(Square(5, 6), Square(4, 7), Player.WHITE)
                    .play(Square(1, 2), Square(2, 1), Player.BLACK)
                    .play(Square(4, 7), Square(2, 5), Player.WHITE)
                    .play(Square(1, 6), Square(3, 4), Player.BLACK)
                    .play(Square(3, 4), Square(5, 2), Player.BLACK)
                    .play(Square(3, 0), Square(1, 2), Player.WHITE)
                    .play(Square(0, 1), Square(2, 3), Player.BLACK)
                    .play(Square(5, 4), Square(4, 5), Player.WHITE)
                    .play(Square(1, 0), Square(2, 1), Player.BLACK)
                    .play(Square(7, 0), Square(6, 1), Player.WHITE)
                    .play(Square(5, 2), Square(7, 0), Player.BLACK)
                    .play(Square(4, 5), Square(3, 6), Player.WHITE)
                    .play(Square(7, 0), Square(5, 0), Player.BLACK)
        }
        assertEquals("Invalid move", ex.message)
    }

    @Test fun `Queen can capture a piece`() {
        val board = BoardRun()
                .play(Square(5, 0), Square(4, 1), Player.WHITE)
                .play(Square(2, 3), Square(3, 4), Player.BLACK)
                .play(Square(4, 1), Square(3, 0), Player.WHITE)
                .play(Square(3, 4), Square(4, 3), Player.BLACK)
                .play(Square(5, 2), Square(3, 4), Player.WHITE)
                .play(Square(2, 5), Square(4, 3), Player.BLACK)
                .play(Square(5, 4), Square(3, 2), Player.WHITE)
                .play(Square(2, 1), Square(4, 3), Player.BLACK)
                .play(Square(6, 3), Square(5, 4), Player.WHITE)
                .play(Square(4, 3), Square(5, 2), Player.BLACK)
                .play(Square(6, 1), Square(4, 3), Player.WHITE)
                .play(Square(2, 7), Square(3, 6), Player.BLACK)
                .play(Square(5, 6), Square(4, 7), Player.WHITE)
                .play(Square(1, 2), Square(2, 1), Player.BLACK)
                .play(Square(4, 7), Square(2, 5), Player.WHITE)
                .play(Square(1, 6), Square(3, 4), Player.BLACK)
                .play(Square(3, 4), Square(5, 2), Player.BLACK)
                .play(Square(3, 0), Square(1, 2), Player.WHITE)
                .play(Square(0, 1), Square(2, 3), Player.BLACK)
                .play(Square(5, 4), Square(4, 5), Player.WHITE)
                .play(Square(1, 0), Square(2, 1), Player.BLACK)
                .play(Square(7, 0), Square(6, 1), Player.WHITE)
                .play(Square(5, 2), Square(7, 0), Player.BLACK)
                .play(Square(4, 5), Square(3, 4), Player.WHITE)
                .play(Square(7, 0), Square(2, 5), Player.BLACK)
        assertEquals(null, Square(3,4).toPosition(board).player)
        assertEquals(Player.BLACK, Square(2, 5).toPosition(board).player)
    }

    @Test fun `Queen has to stop after capturing a piece`() {
        val ex = assertFailsWith<IllegalArgumentException> {
            BoardRun()
                    .play(Square(5, 0), Square(4, 1), Player.WHITE)
                    .play(Square(2, 3), Square(3, 4), Player.BLACK)
                    .play(Square(4, 1), Square(3, 0), Player.WHITE)
                    .play(Square(3, 4), Square(4, 3), Player.BLACK)
                    .play(Square(5, 2), Square(3, 4), Player.WHITE)
                    .play(Square(2, 5), Square(4, 3), Player.BLACK)
                    .play(Square(5, 4), Square(3, 2), Player.WHITE)
                    .play(Square(2, 1), Square(4, 3), Player.BLACK)
                    .play(Square(6, 3), Square(5, 4), Player.WHITE)
                    .play(Square(4, 3), Square(5, 2), Player.BLACK)
                    .play(Square(6, 1), Square(4, 3), Player.WHITE)
                    .play(Square(2, 7), Square(3, 6), Player.BLACK)
                    .play(Square(5, 6), Square(4, 7), Player.WHITE)
                    .play(Square(1, 2), Square(2, 1), Player.BLACK)
                    .play(Square(4, 7), Square(2, 5), Player.WHITE)
                    .play(Square(1, 6), Square(3, 4), Player.BLACK)
                    .play(Square(3, 4), Square(5, 2), Player.BLACK)
                    .play(Square(3, 0), Square(1, 2), Player.WHITE)
                    .play(Square(0, 1), Square(2, 3), Player.BLACK)
                    .play(Square(5, 4), Square(4, 5), Player.WHITE)
                    .play(Square(1, 0), Square(2, 1), Player.BLACK)
                    .play(Square(7, 0), Square(6, 1), Player.WHITE)
                    .play(Square(5, 2), Square(7, 0), Player.BLACK)
                    .play(Square(4, 5), Square(3, 4), Player.WHITE)
                    .play(Square(7, 0), Square(1, 6), Player.BLACK)
        }
        assertEquals("There's a mandatory capture at 6d", ex.message)
    }

    @Test fun `Queen stops after capturing a piece`() {
        val board = BoardRun()
        BoardRun()
                .play(Square(5, 0), Square(4, 1), Player.WHITE)
                .play(Square(2, 3), Square(3, 4), Player.BLACK)
                .play(Square(4, 1), Square(3, 0), Player.WHITE)
                .play(Square(3, 4), Square(4, 3), Player.BLACK)
                .play(Square(5, 2), Square(3, 4), Player.WHITE)
                .play(Square(2, 5), Square(4, 3), Player.BLACK)
                .play(Square(5, 4), Square(3, 2), Player.WHITE)
                .play(Square(2, 1), Square(4, 3), Player.BLACK)
                .play(Square(6, 3), Square(5, 4), Player.WHITE)
                .play(Square(4, 3), Square(5, 2), Player.BLACK)
                .play(Square(6, 1), Square(4, 3), Player.WHITE)
                .play(Square(2, 7), Square(3, 6), Player.BLACK)
                .play(Square(5, 6), Square(4, 7), Player.WHITE)
                .play(Square(1, 2), Square(2, 1), Player.BLACK)
                .play(Square(4, 7), Square(2, 5), Player.WHITE)
                .play(Square(1, 6), Square(3, 4), Player.BLACK)
                .play(Square(3, 4), Square(5, 2), Player.BLACK)
                .play(Square(3, 0), Square(1, 2), Player.WHITE)
                .play(Square(0, 1), Square(2, 3), Player.BLACK)
                .play(Square(5, 4), Square(4, 5), Player.WHITE)
                .play(Square(1, 0), Square(2, 1), Player.BLACK)
                .play(Square(7, 0), Square(6, 1), Player.WHITE)
                .play(Square(5, 2), Square(7, 0), Player.BLACK)
                .play(Square(4, 5), Square(3, 4), Player.WHITE)
                .play(Square(7, 0), Square(2, 5), Player.BLACK)
        assertEquals(Player.BLACK, Square(2, 5).toPosition(board).player)
    }

    @Test fun `Queen mandatory capturing a piece`() {
        val ex = assertFailsWith<IllegalArgumentException> {
            BoardRun()
                    .play(Square(5, 0), Square(4, 1), Player.WHITE)
                    .play(Square(2, 3), Square(3, 4), Player.BLACK)
                    .play(Square(4, 1), Square(3, 0), Player.WHITE)
                    .play(Square(3, 4), Square(4, 3), Player.BLACK)
                    .play(Square(5, 2), Square(3, 4), Player.WHITE)
                    .play(Square(2, 5), Square(4, 3), Player.BLACK)
                    .play(Square(5, 4), Square(3, 2), Player.WHITE)
                    .play(Square(2, 1), Square(4, 3), Player.BLACK)
                    .play(Square(6, 3), Square(5, 4), Player.WHITE)
                    .play(Square(4, 3), Square(5, 2), Player.BLACK)
                    .play(Square(6, 1), Square(4, 3), Player.WHITE)
                    .play(Square(2, 7), Square(3, 6), Player.BLACK)
                    .play(Square(5, 6), Square(4, 7), Player.WHITE)
                    .play(Square(1, 2), Square(2, 1), Player.BLACK)
                    .play(Square(4, 7), Square(2, 5), Player.WHITE)
                    .play(Square(1, 6), Square(3, 4), Player.BLACK)
                    .play(Square(3, 4), Square(5, 2), Player.BLACK)
                    .play(Square(3, 0), Square(1, 2), Player.WHITE)
                    .play(Square(0, 1), Square(2, 3), Player.BLACK)
                    .play(Square(5, 4), Square(4, 5), Player.WHITE)
                    .play(Square(1, 0), Square(2, 1), Player.BLACK)
                    .play(Square(7, 0), Square(6, 1), Player.WHITE)
                    .play(Square(5, 2), Square(7, 0), Player.BLACK)
                    .play(Square(4, 5), Square(3, 4), Player.WHITE)
                    .play(Square(7, 0), Square(5, 2), Player.BLACK)
        }
        assertEquals("There's a mandatory capture at 6d", ex.message)
    }
}
